import{_ as a,c as r,o as s,a4 as i}from"./chunks/framework.wlZR029k.js";const m=JSON.parse('{"title":"Exercicis","description":"","frontmatter":{},"headers":[],"relativePath":"10-exercicis.md","filePath":"10-exercicis.md"}'),t={name:"10-exercicis.md"};function n(l,e,o,c,u,d){return s(),r("div",null,e[0]||(e[0]=[i('<h1 id="exercicis" tabindex="-1">Exercicis <a class="header-anchor" href="#exercicis" aria-label="Permalink to &quot;Exercicis&quot;">​</a></h1><h2 id="exercicis-nivell-basic" tabindex="-1">Exercicis - Nivell bàsic <a class="header-anchor" href="#exercicis-nivell-basic" aria-label="Permalink to &quot;Exercicis - Nivell bàsic&quot;">​</a></h2><h3 id="exercici-1" tabindex="-1">Exercici 1 <a class="header-anchor" href="#exercici-1" aria-label="Permalink to &quot;Exercici 1&quot;">​</a></h3><p>Estàs creant una aplicació que permetrà generar figures geomètriques en dos dimensions a partir de punts. Per a aconseguir-ho, primer que res caldrà crear una classe Punt que ens permeta emmagatzemar les coordenades X i Y.</p><p><strong>a)</strong> Crea la classe Punt amb els atributs necessaris. De moment, seran públics.<br><strong>b)</strong> Instància tres objectes de tipus Punt a la classe principal, y assigna els valors (5,0), (10,10) i (-3,7). Mostra per pantalla les seues coordenades.</p><p>Ara volem crear figures geomètriques senzilles a partir de la classe Punt ja creada. Per exemple, rectangles, els quals es creen a partir de dos punts (en tenen quatre, però només dos són independents).</p><p><strong>c)</strong> Crea una classe Rectangle amb dos atributs Punt públics.<br><strong>d)</strong> Instància un objecte de tipus Rectangle en la classe principal. Pots usar els punts creats en apartats anteriors.</p><p>Fins ara, als atributs els estem assignant valors de la mateixa manera que ho fem amb qualsevol variable. Però es poden inicialitzar al mateix moment d&#39;instanciar un objecte mitjançant el constructor.</p><p><strong>e)</strong> Fes el constructor de les classes Punt i Rectangle, i modifica el programa principal per a usar-los.<br><strong>f)</strong> En la classe principal, mostra per pantalla els seus quatre punts (els dos que té d&#39;atributs i els dos que depenen d&#39;aquests).<br><strong>g)</strong> Mostra per pantalla el perímetre (suma de costats) i l&#39;àrea (ample per alt) de l&#39;objecte de tipus Rectangle creat. Tingues en compte que els costats sempre han de tindre valor positiu.</p><p>L&#39;encapsulament és molt important per evitar accessos indesitjats a la informació de les classes. Per tant, en general, tots els atributs seran privats. I juntament amb l&#39;encapsulament ve la implementació dels <em>getters</em> i <em>setters</em>.</p><p><strong>h)</strong> Modifica les classes Punt i Rectangle de forma que tots els atributs passen a ser privats, i afig els <em>getters</em> i <em>setters</em> corresponents. Modifica també la classe principal de forma que use estos mètodes (ja no tindrà accés directe ls seus valors).</p><p>Una classe ben dissenyada deuria incloure mètodes que realitzen operacions amb la informació dels objectes. D&#39;aquesta manera la classe disposarà de funcionalitats útils tant per a nosaltres com per a altres programadors.</p><p><strong>i)</strong> Implementa en la classe Punt les funcionalitats següents:</p><ul><li>Imprimir per pantalla les coordenades.</li><li>Modificar els valors d&#39;ambdues coordenades al mateix temps.</li><li>Desplaçar el punt la quantitat <em>d</em> indicada, és a dir, les noves coordenades del punt serien (d<em>X, d</em>Y).</li><li>Retornar la distància entre el propi objecte i un altre objecte que es passa com a paràmetre.</li></ul><p><strong>j)</strong> Implementa en la classe Rectangle les funcionalitats següents:</p><ul><li>Imprimir la informació del rectangle per pantalla (els quatre punts).</li><li>Retornar el perímetre.</li><li>Retornar l&#39;àrea.</li></ul><p><strong>k)</strong> Prova a usar tots aquests mètodes des del programa principal.</p><p>Els modificadors d&#39;estàtic i de constant són opcionals, poden utilitzar-se tant en atributs com en mètodes i poden combinar-se.</p><p><strong>l)</strong> Declara dos atributs constants de classe que van a servir per a límit de les coordenades. És a dir, els valors de X i Y de qualsevol punt no estarà fora dels valors -100 i 100.<br><strong>m)</strong> Implementa una funcionalitat de classe que permeta generar punts de forma aleatòria (dins dels límits establits).</p><p>Ampliació:</p><p><strong>n)</strong> Crea la classe Triangle, amb els atributs necessaris i alguns mètodes (els equivalents a la classe Rectangle, per exemple). Instància algun objecte de tipus Triangle i prova els seus mètodes des de la classe principal.</p><h3 id="exercici-2" tabindex="-1">Exercici 2 <a class="header-anchor" href="#exercici-2" aria-label="Permalink to &quot;Exercici 2&quot;">​</a></h3><p>Estàs desenvolupant un sistema per gestionar les reserves dels ordinadors d&#39;un laboratori d&#39;informàtica. El laboratori està compost per diversos ordinadors, i cadascun pot ser reservat per un alumne durant una hora concreta. Per això, caldrà definir una sèrie de classes per representar els elements implicats.</p><p><strong>a)</strong> Crea una classe Ordinador amb els atributs següents (de moment, públics): id (un enter que identifica l&#39;ordinador), model (una cadena), ram (quantitat entera en GB).<br><strong>b)</strong> En la classe principal, crea tres ordinadors diferents, amb dades fictícies, i mostra les seues dades per pantalla.</p><p>Ara volem representar una reserva. Cada reserva l&#39;associarem a un alumne, una hora i un ordinador concret.</p><p><strong>c)</strong> Crea una classe Reserva amb tres atributs públics: el nom de l&#39;alumne, la franja horària (una cadena com &quot;10:00-11:00&quot;) i l&#39;ordinador que reserva (de tipus Ordinador).<br><strong>d)</strong> Instancia un objecte de tipus Reserva en la classe principal, fent servir un dels ordinadors creats abans. Mostra la informació per pantalla.</p><p>Ara definirem constructors per facilitar la creació d&#39;objectes.</p><p><strong>e)</strong> Implementa constructors per a les classes Ordinador i Reserva. Modifica el programa principal per a utilitzar-los.<br><strong>f)</strong> Afig un mètode a Reserva que mostre tota la informació d&#39;una reserva per pantalla. Usa&#39;l en el programa principal.</p><p>Ara encapsularem les dades.</p><p><strong>g)</strong> Fes privats tots els atributs de Ordinador i Reserva, i crea els getters i setters corresponents. Modifica el programa principal per accedir a les dades mitjançant aquests mètodes.</p><p>Volem gestionar múltiples ordinadors i múltiples reserves. Utilitzarem estructures més complexes.</p><p><strong>h)</strong> Afig a la classe principal un llistat d&#39;ordinadors disponibles i un mapa de reserves, on la clau serà una cadena amb la franja horària i el valor serà una llista de reserves fetes per a eixa hora.<br><strong>i)</strong> Implementa una funcionalitat que permeta reservar un ordinador per a una hora concreta:</p><ul><li>L&#39;usuari introdueix el seu nom, l&#39;id de l&#39;ordinador i l&#39;hora inicial (per exemple, 10. Després hauràs de crear la cadena &quot;10:00-11:00&quot;). <ul><li>Si ja està reservat a eixa hora, es mostra un missatge d&#39;error.</li><li>Si l&#39;ordinador no existeix (no troba el id) mostra un missatge d&#39;error.</li><li>Si està lliure, es crea la reserva i s&#39;afegeix al mapa.</li></ul></li></ul><p><strong>j)</strong> Afig un mètode a la classe principal per a mostrar totes les reserves realitzades en una franja horària concreta.<br><strong>k)</strong> Afig una funcionalitat per a buscar totes les hores reservades per un determinat alumne. Retorna la quantitat.<br><strong>l)</strong> Declara una constant de classe per indicar el nombre màxim de reserves per hora (per exemple, 5). Si ja hi ha aquest nombre de reserves per a una franja concreta, no s&#39;hi poden afegir més.<br><strong>m)</strong> Declara una constant de classe per indicar el nombre màxim de reserves fetes per un mateix alumne (per exemple, 3). Si ja hi ha aquest nombre de reserves per a un mateix alumne, no s&#39;hi poden afegir més.</p><p>En el programa principal prova tots els mètodes.</p><h2 id="exercicis-nivell-mitja" tabindex="-1">Exercicis - Nivell mitjà <a class="header-anchor" href="#exercicis-nivell-mitja" aria-label="Permalink to &quot;Exercicis - Nivell mitjà&quot;">​</a></h2><h3 id="exercici-3" tabindex="-1">Exercici 3 <a class="header-anchor" href="#exercici-3" aria-label="Permalink to &quot;Exercici 3&quot;">​</a></h3><p>Estàs desenvolupant una aplicació per a emmagatzemar informació de cançons i àlbums d&#39;una manera pràctica i organitzada.</p><p><strong>Una cançó contindrà</strong> la informació bàsica d&#39;una peça musical: <strong>un títol, un/a artista i una duració (en segons)</strong>. Com és habitual, hi ha certs límits a l&#39;hora de considerar si una peça musical és vàlida: no es permetran cançons massa curtes ni excessivament llargues. Per tant, <strong>la duració</strong> de cada pista <strong>haurà d&#39;estar entre els 10 i els 600 segons</strong>. Si en algun moment es pretén introduir una duració fora d&#39;aquest marge, l&#39;aplicació haurà d&#39;indicar-ho clarament i tornar a demanar el valor fins que aquest siga adequat. Tampoc es permeten <strong>títols</strong> massa llargs, <strong>amb un màxim de 50 caràcters</strong>.</p><p>A més de gestionar cançons individuals, l&#39;aplicació ha de permetre agrupar-les en àlbums. Un àlbum tindrà un nom que el definisca, però al principi es trobarà buit de cançons. L&#39;usuari haurà de poder afegir tantes cançons com desitge, una a una, mitjançant el teclat. No hi haurà cap limitació pel que fa al nombre de cançons per àlbum.</p><p>Per tal que la interacció amb l&#39;usuari siga el més útil i informativa possible, caldrà oferir diversos recursos per a consultar dades. L&#39;usuari haurà de poder <strong>visualitzar fàcilment la informació completa d&#39;una cançó</strong> concreta <strong>o d&#39;un àlbum</strong> sencer, amb tots els detalls ben presentats. A més, serà convenient disposar d&#39;un sistema que permeta <strong>localitzar totes les cançons d&#39;un àlbum que tinguen una duració superior a cinc minuts</strong> (és a dir, més de 300 segons), ja que sovint s&#39;utilitzen per a crear recopilatoris especials o seleccions per a oients exigents.</p><p>L&#39;usuari també tindrà la possibilitat de <strong>comparar la duració de dues cançons</strong> qualsevol per tal de saber quina d&#39;elles és més llarga, una tasca habitual a l&#39;hora d&#39;ordenar pistes dins d&#39;un àlbum. Altres funcionalitats interessants seran la de <strong>conèixer la durada total de totes les cançons d&#39;un àlbum</strong> determinat, així com quina d&#39;elles és <strong>la més curta i quina és la més extensa</strong>. Per fer l&#39;experiència un poc més dinàmica, el sistema oferirà també la possibilitat de s<strong>eleccionar aleatòriament una de les cançons d&#39;un àlbum i mostrar-ne la informació</strong>, com si es tractara d&#39;una recomanació sorpresa per a escoltar en el moment.</p><p>Una vegada desenvolupada l&#39;aplicació, hauràs de crear un escenari de proves on es puguen verificar totes aquestes funcionalitats, assegurant-te que tot el sistema respon correctament i compleix amb els objectius plantejats.</p><h2 id="exercicis-nivell-avancat" tabindex="-1">Exercicis - Nivell avançat <a class="header-anchor" href="#exercicis-nivell-avancat" aria-label="Permalink to &quot;Exercicis - Nivell avançat&quot;">​</a></h2><h3 id="exercici-4" tabindex="-1">Exercici 4 <a class="header-anchor" href="#exercici-4" aria-label="Permalink to &quot;Exercici 4&quot;">​</a></h3><p>Estàs treballant en el departament de nutrició d&#39;un servei de càtering i necessites un sistema per organitzar tots els ingredients i elaborar un receptari de plats. Cada ingredient disposa d&#39;un nom, un valor energètic en calories per unitat i un preu per unitat (amb valors raonables, per exemple entre 1 kcal i 1000 kcal, i entre 0,01€ i 100€; si es prova a introduir un valor fora d&#39;aquest marge, s&#39;haurà de corregir fins a tenir-ne un de vàlid).</p><p>A partir d&#39;aquests ingredients, l&#39;equip de cuina vol crear receptes, cadascuna amb un nom identificatiu i una relació d&#39;ingredients amb les quantitats necessàries de cada un (per exemple, 200 grams de quinoa, 50 grams de tomaca). Al principi el receptari estarà buit, però el programa ha de permetre afegir tantes receptes com es vulguen, sempre associant-les a ingredients ja existents.</p><p>Per fer que el servei sigui àgil i eficient, el sistema ha de proporcionar diverses eines de consulta i càlcul:</p><ul><li>Mostrar la informació completa d&#39;un ingredient a partir del seu nom.</li><li>Mostrar la llista de totes les receptes disponibles, ordenades alfabèticament pel seu nom.</li><li>Per a una recepta determinada, calcular el total de calories i el cost total.</li><li>Localitzar totes les receptes que tinguen un cost inferior a 3€, per preparar menús econòmics.</li><li>Calcular la mitjana de calories i la mitjana de cost de totes les receptes creades.</li><li>Identificar la recepta més lleugera (menys calories) i la més barata del conjunt.</li><li>Oferir una recomanació aleatòria: triar a l&#39;atzar una recepta i mostrar-ne tots els detalls com a suggeriment de menú.</li></ul><p>Per garantir la coherència, caldrà provar totes les funcionalitats del programa. Així asseguraràs que, d&#39;una banda, els nutricionistes tenen tota la informació sempre a mà, i de l&#39;altra, que el servei de càtering pot planificar menús saludables i adaptats a diferents pressupostos de manera ràpida i fiable.</p><h3 id="exercici-5" tabindex="-1">Exercici 5 <a class="header-anchor" href="#exercici-5" aria-label="Permalink to &quot;Exercici 5&quot;">​</a></h3><p>Estàs col·laborant en la digitalització d&#39;un petit magatzem logístic d&#39;un centre de distribució. Fins ara, la gestió es feia amb paper, però ara es vol implementar un sistema que permeta emmagatzemar informació sobre els productes, controlar existències i facilitar certes operacions habituals del dia a dia.</p><p>Cada producte es identifica per un codi alfanumèric únic (com per exemple &quot;A105&quot; o &quot;X003&quot;) que està composat per una lletra i tres números, i es generarà automàticament de forma aleatòria en introduir un nou producte al sistema. Els productes tenen associats, a més, altres tres valors: un nom comercial, una quantitat actual en estoc i el pes per unitat (en grams). Per tal d&#39;evitar errors, s&#39;ha acordat que només s&#39;admetran pesos entre 10 i 10.000 grams. Si l&#39;usuari intenta introduir un valor fora d&#39;aquest rang, el sistema haurà de mostrar un missatge d&#39;error i tornar a demanar-lo.</p><p>Els productes es distribueixen per zones del magatzem, i cada zona està identificada amb un nom (com &quot;Zona A&quot;, &quot;Zona B&quot;, etc.). Cada zona manté un registre dels productes que conté, així com les unitats concretes que hi ha de cada un. Serà com una llista de registres, on cada entrada conté el codi del producte i les unitats emmagatzemades.</p><p>Les zones del magatzem pertanyen a un magatzem, amb nom, localització geogràfica i llistat de zones, que s&#39;haurà de generar en el programa només una vegada, a l&#39;inici de tot. Per tant, el magatzem contindrà un llistat de zones, i cada zona contindrà diversos productes. Com el magatzem té un espai limitat, no podrà contindre més d&#39;un cert valor de pes, establit en la legislació en 10.000 kilograms (10.000.000 grams). En cas d&#39;intentar introduir un producte, si es sobrepassa este límit, no s&#39;afegirà i s&#39;indicarà per pantalla.</p><p>El sistema haurà de permetre:</p><ul><li>Registrar nous productes amb validació de dades.</li><li>Afegir unitats d&#39;un producte a una zona concreta, indicant codi, zona i nombre d&#39;unitats.</li><li>Traure productes d&#39;una zona.</li><li>Moure productes d&#39;una zona a una altra.</li><li>Mostrar tota la informació d&#39;un producte a partir del seu codi.</li><li>Consultar tot el que hi ha en una zona, amb el total d&#39;unitats per codi i el pes total que ocupen.</li><li>Localitzar totes les unitats de productes pesats que cal transportar amb maquinària (superen els 5 kg per unitat).</li><li>Comparar dos productes diferents per saber quin pesa més per unitat.</li><li>Calcular el pes total en grams que representa tot el contingut d&#39;una zona.</li><li>Calcular el pes total en grams que representa tot el contingut del magatzem sencer.</li><li>Determinar quin és el producte més pesat i el més lleuger entre els que hi ha en una zona.</li><li>Seleccionar aleatòriament un producte d&#39;una zona per a fer un control d&#39;estoc sorpresa.</li><li>Afegir noves zones al magatzem.</li><li>Eliminar una zona, sempre que no tinga ningun producte.</li></ul><p>Una vegada implementat el sistema, s&#39;haurà de provar creant un magatzem diversos productes, distribuint-los per zones diferents i comprovant que totes les funcionalitats responen de manera correcta.</p>',58)]))}const g=a(t,[["render",n]]);export{m as __pageData,g as default};
